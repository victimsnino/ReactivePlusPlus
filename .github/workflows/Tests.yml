name: Unit tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    
    strategy:
      matrix:
        config:
        -  name: "Linux GCC"
           os: ubuntu-latest
           cc: "gcc"
           cxx: "g++"
           relative_path_bench: "build/bin/rpp_tests"
           path_to_cache: ".ccache"
        -  name: "Linux CLANG"
           os: ubuntu-latest
           cc: "clang" 
           cxx: "clang++"
           relative_path_bench: "build/bin/rpp_tests"
           path_to_cache: ".ccache"
        -  name: "Windows MSVC"
           os: windows-latest
           cc: "cl"
           cxx: "cl"
           relative_path_bench: "build/bin/Release/rpp_tests"
           path_to_cache: "build"

    steps:
    - name: Temp
      run: echo "${{toJSON(github.event)}}"

    - uses: actions/checkout@v2
      with:
        submodules: true
        token: ${{ secrets.TOKEN }}
        
    - name: Setup ccache
      uses: Chocobo1/setup-ccache-action@v1
      with:
        ccache_options: |
          cache_dir=${{github.workspace}}/.ccache
          
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")
        
    - name: ccache cache files
      uses: actions/cache@v1.1.0
      with:
        path: |
          ${{github.workspace}}/${{ matrix.config.path_to_cache }}
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-
      
    - name: Configure CMake
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
        
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 2

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: Test Report ${{ matrix.config.name }}
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test report ${{ matrix.config.name }} 
        path: ./build/test_results/*.xml
        reporter: java-junit

    - name: Run benchmarks only
      run: ${{github.workspace}}/${{ matrix.config.relative_path_bench }} [benchmark] -r xml -o ${{github.workspace}}/build/test_results/benchmark_result.txt
      if: matrix.config.relative_path_bench != ''

    - name: Process results
      run: python ${{github.workspace}}/ci/parse_benchmark_to_json.py ${{github.workspace}}/build/test_results/benchmark_result.txt

    - name: Upload parsed results
      uses: actions/upload-artifact@v3
      with:
        name: parsed-results-${{ matrix.config.name }}
        path: parsed.json

  process:
    name: Process benchmark results
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.TOKEN }}

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - uses: actions/checkout@v2
      with:
        ref: gh-pages
        token: ${{ secrets.TOKEN }}
        path: gh-pages

    - name: Install deps
      run: pip3 install plotly

    - name: Process benchmarks
      run: python3 ${{github.workspace}}/ci/process_benchmark_data.py ${{github.event.head_commit.id}} ${{github.event.head_commit.url}}

    - name: Create html
      run: python3 ${{github.workspace}}/ci/create_graphs_for_benchmark_data.py

    - name: Upload html
      uses: actions/upload-artifact@v3
      with:
        name: benchmark.html
        path: ./gh-pages/benchmark.html