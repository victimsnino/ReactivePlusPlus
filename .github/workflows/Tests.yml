name: Unit tests

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
    types: [opened, reopened, synchronize, ready_for_review]
    

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    if: github.event.pull_request.draft == false
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    
    strategy:
      matrix:
        config:
        -  name: "Linux GCC"
           os: ubuntu-latest
           cc: "gcc-10"
           cxx: "g++-10"
           relative_path_bench: "build/bin/rpp_benchmark"
           relative_path_rxcpp_bench: "build/bin/rxcpp_benchmark"
           additional_cmake_args: "-DCMAKE_C_COMPILER_LAUNCHER=buildcache -DCMAKE_CXX_COMPILER_LAUNCHER=buildcache -DRPP_BUILD_SFML_CODE=1"
           sudo: "sudo"
        -  name: "Linux CLANG"
           os: ubuntu-latest
           cc: "clang" 
           cxx: "clang++"
           relative_path_bench: "build/bin/rpp_benchmark"
           relative_path_rxcpp_bench: "build/bin/rxcpp_benchmark"
           additional_cmake_args: "-DCMAKE_C_COMPILER_LAUNCHER=buildcache -DCMAKE_CXX_COMPILER_LAUNCHER=buildcache -DRPP_BUILD_SFML_CODE=1"
           sudo: "sudo"
        -  name: "Windows MSVC"
           os: windows-latest
           cc: "cl"
           cxx: "cl"
           relative_path_bench: "build/bin/Release/rpp_benchmark"
           relative_path_rxcpp_bench: "build/bin/Release/rxcpp_benchmark"
           additional_cmake_args: ""
           sudo: ""

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}

    - name: Setup cache
      uses: mikehardy/buildcache-action@v1
      if: matrix.config.os != 'windows-latest'
      with:
        cache_key: ${{ matrix.config.name }}

    - name: Install Catch2
      env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
      run: |
        git clone --branch v3.1.0 https://github.com/catchorg/Catch2.git 
        cd Catch2
        cmake -B build -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release
        ${{matrix.config.sudo}} cmake --build build/ --target install --parallel 2 --config Release
        
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      if: matrix.config.name == 'Linux CLANG'
      with:
        languages: cpp

    - name: Install SFML
      if: matrix.config.os != 'windows-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsfml-dev
      
    - name: Configure CMake
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: cmake -B ${{github.workspace}}/build -DRPP_BUILD_SAMPLES=1 -DRPP_BUILD_TESTS=1 -DRPP_AUTOTESTS=1 -DCATCH_CONFIG_FAST_COMPILE=1 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{matrix.config.additional_cmake_args}}
        
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 4

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: Test Report ${{ matrix.config.name }}
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test report ${{ matrix.config.name }} 
        path: ./build/test_results/*.xml
        reporter: java-junit

    - name: Run benchmarks only
      run: |
        ${{github.workspace}}/${{ matrix.config.relative_path_bench }} -r xml -o ${{github.workspace}}/build/test_results/rpp_benchmark_result.txt
        ${{github.workspace}}/${{ matrix.config.relative_path_rxcpp_bench }} -r xml -o ${{github.workspace}}/build/test_results/rxcpp_benchmark_result.txt

    - name: Upload parsed results
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.name }}
        path: | 
          ${{github.workspace}}/build/test_results/rpp_benchmark_result.txt
          ${{github.workspace}}/build/test_results/rxcpp_benchmark_result.txt
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      if: matrix.config.name == 'Linux CLANG'

  process:
    name: Process benchmark results
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - uses: actions/checkout@v2
      with:
        ref: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}
        path: gh-pages

    - name: Install deps
      run: pip3 install pandas

    - name: Process benchmarks
      run: python3 ${{github.workspace}}/ci/process_benchmark_data.py ${GITHUB_SHA::8} "${{github.event.head_commit.message}}"

    - name: Compare results
      run: |
        python3 ${{github.workspace}}/ci/compare_results.py > comment-body.txt
        body=$(cat comment-body.txt)
        body="${body//'%'/'%25'}"
        body="${body//$'\n'/'%0A'}"
        body="${body//$'\r'/'%0D'}" 
        echo ::set-output name=body::$body
      id: results
      
    - name: Find Comment
      uses: peter-evans/find-comment@v2
      id: fc
      if: github.event_name != 'push'
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: GCC
        
    - name: Create comment
      if: github.event_name == 'push'
      uses: peter-evans/commit-comment@v2
      with:
        body: ${{ steps.results.outputs.body }}
        
    - name: Update comment
      uses: peter-evans/create-or-update-comment@v2
      if: github.event_name != 'push'
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: ${{ steps.results.outputs.body }}
        edit-mode: replace

    - name: Install deps
      run: pip3 install plotly
      if: github.event_name == 'push'

    - name: Create html
      run: python3 ${{github.workspace}}/ci/create_graphs_for_benchmark_data.py 
      if: github.event_name == 'push'

    - name: Upload html
      uses: actions/upload-artifact@v3
      if: github.event_name == 'push'
      with:
        name: benchmark.html
        path: ./gh-pages/benchmark.html

    - name: Deploy to github pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.event_name == 'push'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./gh-pages
