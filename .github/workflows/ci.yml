name: CI

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

env:
  CATCH2_VERSION: v3.1.0
  Catch2_DIR: ~/Catch2_BIN

jobs:
  download_deps:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    name: Build Deps - ${{ matrix.os }}

    steps:
      - name: Cache Catch2 
        uses: actions/cache@v3
        id: cache-catch2
        with:
          path: ${{env.Catch2_DIR}}
          key: catch2-${{env.CATCH2_VERSION}}-${{matrix.os}}

      - name: Build Catch2
        if: steps.cache-catch2.outputs.cache-hit != 'true'
        run: |
          git clone --branch ${{env.CATCH2_VERSION}} https://github.com/catchorg/Catch2.git 
          cd Catch2
          cmake -B build -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release -DCATCH_CONFIG_FAST_COMPILE=1 -DCMAKE_INSTALL_PREFIX=${{env.Catch2_DIR}}

      - name: Install Catch2 (unix)
        if: steps.cache-catch2.outputs.cache-hit != 'true' && matrix.os != 'windows-latest'
        run: sudo cmake --build Catch2/build/ --target install --parallel 2 --config Release
      
      - name: Install Catch2 (windows)
        if: steps.cache-catch2.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
        run: cmake --build Catch2/build/ --target install --parallel 2 --config Release

  coverage:
    name: Test Coverage

    needs: [download_deps]

    runs-on: ubuntu-latest
    if: github.repository_owner == 'victimsnino'

    steps:
    - uses: actions/checkout@v3

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Restore Catch2 
      uses: actions/cache@v3
      id: cache-catch2
      with:
        path: ${{env.Catch2_DIR}}
        key: catch2-${{env.CATCH2_VERSION}}-ubuntu-latest

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ci-coverage
        buildPreset: ci-build
        testPreset: ci-tests

    - name: Process coverage info
      run: cmake --build build -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: build/coverage.info
        
  test:
    needs: [download_deps]

    strategy:
      matrix:    
        config:
        -  {name: Unit Tests Ubuntu GCC,   configurePresets: ci-ubuntu-gcc-tests,  os: ubuntu-latest, testPreset: ci-tests}
        -  {name: Unit Tests Ubuntu Clang, configurePresets: ci-ubuntu-clang-tests,os: ubuntu-latest, testPreset: ci-tests}
        -  {name: Unit Tests Windows,      configurePresets: ci-windows-tests,     os: windows-latest,testPreset: ci-tests}

        -  {name: Benchmarks Ubuntu GCC,   configurePresets: ci-ubuntu-gcc-benchmarks,  os: ubuntu-latest, testPreset: ci-tests, benchmarkName: Ubuntu GCC}
        -  {name: Benchmarks Ubuntu Clang, configurePresets: ci-ubuntu-clang-benchmarks,os: ubuntu-latest, testPreset: ci-tests, benchmarkName: Ubuntu Clang}
        -  {name: Benchmarks Windows,      configurePresets: ci-windows-benchmarks,     os: windows-latest,testPreset: ci-tests, benchmarkName: Windows MSVC}

        -  {name: Sanitize, configurePresets: ci-sanitize, os: windows-latest,testPreset: ci-sanitize}


    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}

    steps:
    - uses: actions/checkout@v3
      with:
          fetch-depth: 0

    - name: Install deps
      if: matrix.config.os != 'windows-latest'
      run: sudo apt-get update -q && sudo apt-get install cppcheck libsfml-dev lcov -y -q
      
    - name: Restore Catch2 
      uses: actions/cache@v3
      id: cache-catch2
      with:
        path: ${{env.Catch2_DIR}}
        key: catch2-${{env.CATCH2_VERSION}}-${{matrix.config.os}}

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{ matrix.config.configurePresets }}
        buildPreset: ci-build
        testPreset: ${{ matrix.config.testPreset }}

    - name: Upload benchmark results
      if: matrix.config.benchmarkName
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.benchmarkName }}
        path: ${{github.workspace}}/build/test_results/benchmarks/*

    # - name: Analyze diff with clang-tidy
    #   if: matrix.config.name == 'ci-ubuntu-clang' && github.event_name != 'push'
    #   run: |
    #     mkdir clang-tidy-result
    #     git diff -U0 origin/main | clang-tidy-diff -j 0 -p1 -path build -export-fixes clang-tidy-result/fixes.yml -extra-arg=-std=c++20 -checks=bugprone-*,concurrency-*,performance-*

    # - name: Run clang-tidy-pr-comments action
    #   if: matrix.config.name == 'ci-ubuntu-clang' && github.event_name != 'push'
    #   uses: platisd/clang-tidy-pr-comments@master
    #   with:
    #     # The GitHub token (or a personal access token)
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     # The path to the clang-tidy fixes generated previously
    #     clang_tidy_fixes: clang-tidy-result/fixes.yml
    #     # Optionally set to true if you want the Action to request
    #     # changes in case warnings are found
    #     request_changes: false
    #     # Optionally set the number of comments per review
    #     # to avoid GitHub API timeouts for heavily loaded
    #     # pull requests
    #     suggestions_per_comment: 10

  docs:
    name: Build Doxygen Docs

    needs: [test]

    runs-on: ubuntu-latest

    if: github.event_name == 'push'
      && github.repository_owner == 'victimsnino'

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install deps
      run: |
        pip3 install rxmarbles
        sudo apt-get install doxygen

    - name: Doxygen
      run: doxygen ./Doxyfile
    
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./gen_docs
        destination_dir: docs
